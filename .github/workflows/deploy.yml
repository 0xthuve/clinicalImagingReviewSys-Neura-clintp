name: Deploy to AWS EC2 via Docker Hub

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      APP_NAME: brea-can
      DOCKER_IMAGE: thuvecodes/brea-can

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 3.5: Create .env.local for build
      - name: Create .env.local
        run: |
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env.local
        shell: bash

      # Step 4: Build project
      - name: Build project
        run: npm run build

      # Step 5: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 7: Push Docker image
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ env.DOCKER_IMAGE }}:latest

      # Step 8: SSH into EC2 and deploy with Docker Compose
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Create deployment directory if it doesn't exist
            mkdir -p ~/brea-can-deployment
            cd ~/brea-can-deployment
            
            # Create docker-compose.yml for production
            cat > docker-compose.yml << 'EOF'
            version: '3.8'
            
            services:
              app:
                image: ${{ env.DOCKER_IMAGE }}:latest
                container_name: ${{ env.APP_NAME }}
                ports:
                  - "3000:3000"
                environment:
                  - NODE_ENV=production
                  - MONGODB_URI=mongodb://mongo:27017/BCAN
                depends_on:
                  - mongo
                restart: unless-stopped
                networks:
                  - brea-can-network
            
              mongo:
                image: mongo:6.0
                container_name: ${{ env.APP_NAME }}-mongo
                ports:
                  - "27017:27017"
                volumes:
                  - mongo_data:/data/db
                environment:
                  - MONGO_INITDB_ROOT_USERNAME=admin
                  - MONGO_INITDB_ROOT_PASSWORD=password123
                  - MONGO_INITDB_DATABASE=BCAN
                restart: unless-stopped
                networks:
                  - brea-can-network
            
            volumes:
              mongo_data:
            
            networks:
              brea-can-network:
                driver: bridge
            EOF
            
            # Pull the latest images
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            docker pull mongo:6.0
            
            # Stop and remove existing containers
            docker-compose down || true
            
            # Start the services
            docker-compose up -d
            
            # Wait for services to be ready
            sleep 10
            
            # Check if containers are running
            docker-compose ps
          timeout: 15m
          command_timeout: 15m